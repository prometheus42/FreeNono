<?xml version="1.0"?>
<project name="FreeNono" basedir="." default="dist" xmlns:ivy="antlib:org.apache.ivy.ant">

	<property name="src" location="src" />
	<property name="resources" location="src/resources" />
	<property name="build" location="build" />
	<property name="dist" location="dist" />
	<property name="signed" location="signed" />
	<property name="lib_ui" location="../lib_ui/src" />
	<property name="lib_data" location="../lib_data/src" />

	<property name="docs" location="../docs" />
	<property name="unitTests" location="../Test" />

	<property name="nonograms" location="nonograms" />
	<property name="nonogramsDist" value="nonograms" />
	<property name="lib" value="lib" />
	<property name="docsDest" value="docs" />

	<property name="startScript" value="FreeNono.sh" />
	<property name="package.name" value="freenono" />

	<property name="name" value="FreeNono" />
	<property name='app.version' value='0.10a' />
	<property name='app.name' value='FreeNono' />
	<property name='app.vendor' value='FreeNono Development Team' />
	<property name="svn_revision" value=""/>
	

	<description>
		FreeNono
		
		Todo:
		- Combine both deb targets and remove one of them.  
		- 
		
		Dependencies:
		- launch4j
		- ant-deb for generating debian packages
		- nsis and nsis-ant for generating windows installer

		Put all dependencies into the $ANT_HOME/lib directory! 
		
		To compile with ivy dependencies: ant resolve -lib /usr/share/java/ivy.jar
	</description>


	<echo>
	    Application: ${app.name} ${app.version}
	    Build File : ${ant.file} 
	    Run by     : ${user.name}
	    Build Dir  : ${build}
	</echo>


	<target name="init">

		<!-- Create the time stamp -->
		<tstamp />
		<!-- Create the directory structure -->
		<mkdir dir="${build}" />
		<mkdir dir="${dist}" />
		<mkdir dir="${signed}" />

	</target>


	<target name="packNonograms" depends="init">

		<!-- pack a zip file for each course -->
		<zip destfile="${dist}/${nonogramsDist}/Alphabet.nonopack" basedir="${nonograms}/Alphabet" />
		<zip destfile="${dist}/${nonogramsDist}/Kanji A.nonopack" basedir="${nonograms}/Kanji A" />
		<zip destfile="${dist}/${nonogramsDist}/Hiragana.nonopack" basedir="${nonograms}/Hiragana" />
		<zip destfile="${dist}/${nonogramsDist}/Katakana.nonopack" basedir="${nonograms}/Katakana" />
		<zip destfile="${dist}/${nonogramsDist}/Mario's Picross Kinoko Course.nonopack" basedir="${nonograms}/Mario's Picross Kinoko Course" />
		<zip destfile="${dist}/${nonogramsDist}/Mario's Picross Star Course.nonopack" basedir="${nonograms}/Mario's Picross Star Course" />
		<zip destfile="${dist}/${nonogramsDist}/Mario's Picross 2 Mario World.nonopack" basedir="${nonograms}/Mario's Picross 2 Mario World" />
		<zip destfile="${dist}/${nonogramsDist}/Various 1.nonopack" basedir="${nonograms}/Various 1" />
		<zip destfile="${dist}/${nonogramsDist}/QNonograms.nonopack" basedir="${nonograms}/QNonograms" />
		<zip destfile="${dist}/${nonogramsDist}/Akira Course.nonopack" basedir="${nonograms}/Akira Course" />
		<zip destfile="${dist}/${nonogramsDist}/Rumiko Course 10x10.nonopack" basedir="${nonograms}/Rumiko Course 10x10" />
		<zip destfile="${dist}/${nonogramsDist}/Rumiko Course 15x15.nonopack" basedir="${nonograms}/Rumiko Course 15x15" />
		<zip destfile="${dist}/${nonogramsDist}/Rumiko Course 20x20.nonopack" basedir="${nonograms}/Rumiko Course 20x20" />
		<zip destfile="${dist}/${nonogramsDist}/Rumiko Course 25x25.nonopack" basedir="${nonograms}/Rumiko Course 25x25" />
		<zip destfile="${dist}/${nonogramsDist}/Rumiko Course 30x30.nonopack" basedir="${nonograms}/Rumiko Course 30x30" />

		<!-- Copy some nonograms into nonograms folder -->
		<copy todir="${dist}">
			<fileset dir="." includes="${nonogramsDist}/*.nonopack" />
		</copy>

	</target>


	<target name="build" depends="init">

		<!-- Compile the java code from ${src} into ${build} -->
		<javac destdir="${build}" debug="false" deprecation="true" optimize="true" 
			includeantruntime="false" target="1.7" source="1.7">
			<src>
				<pathelement location="${src}" />
				<pathelement location="${lib_ui}" />
				<pathelement location="${lib_data}" />
			</src>
			<!-- Set classpath -->
			<classpath>
				<pathelement path="${lib}/core-renderer.jar" />
				<pathelement path="${lib}/log4j-1.2.jar" />
				<pathelement path="${lib}/org.restlet.jar" />
				<pathelement path="${lib}/svgSalamander.jar" />
				<pathelement path="${lib}/jinput-20100502.jar" />
				<pathelement path="${lib}/hazelcast-3.2.jar" />
			</classpath>
		</javac>

	</target>


    <target name="get_svn_revision">
            
    	<!-- Find HEAD revision number from svn repo -->
		<exec executable="svn" outputproperty="svninfo.xml">
			<arg line="info svn://svn.code.sf.net/p/freenono/svn/trunk/FreeNono -r HEAD --xml" />
    	</exec>
    	<xmlproperty collapseAttributes="true">
    		<propertyresource name="svninfo.xml" />
    	</xmlproperty>
    	<!-- result in property ${info.entry.revision} -->
    	
    	<property name="svn_revision" value="${info.entry.revision}"/>
    	
    </target>



	<target name="dist" depends="get_svn_revision, runUnitTests, build, packNonograms" 
		description="generate the distribution">

		<!-- Set lib path for jar manifest if it was not set priviously (setRuntimeLibDeb) -->
		<property name="runtimeLib" value="lib" />

		<!-- Include all libraries in dist folder-->
		<copy todir="${dist}">
			<fileset dir="." includes="${lib}/*.jar" 
				excludes="${lib}/sqlite-jdbc-3.7.2.jar ${lib}/hazelcast-client-3.2.jar" />
		</copy>

		<!-- Put everything into JAR file -->
		<jar jarfile="${dist}/${name}-${app.version}-${DSTAMP}.jar" basedir="${build}">

			<!-- Include source files -->
			<fileset dir="${src}" includes="**/*.java" />
			<fileset dir="${lib_ui}" includes="**/*.java" />
			<fileset dir="${lib_data}" includes="**/*.java" />

			<!-- Include resource files -->
			<fileset dir="${src}" includes="resources/**/*" />
			<fileset dir="${lib_data}" includes="resources/xsd/nonogram.xsd" />
			<fileset dir="${src}" includes="log4j.xml" />
			<fileset dir="${docs}" includes="about/*" />
			<fileset dir="${docs}" includes="help/*" />

			<!-- Include i18n files -->
			<fileset dir="${src}" includes="i18n/**/*" />

			<!-- Build manifest -->
			<manifest>
				<attribute name="Main-Class" value="org.freenono.RunUI" />
				<attribute name="Class-Path" value="${runtimeLib}/log4j-1.2.jar ${runtimeLib}/restlet.jar ${runtimeLib}/jogg-0.0.7.jar  ${runtimeLib}/jorbis-0.0.15.jar  ${runtimeLib}/tritonus_share.jar  ${runtimeLib}/vorbisspi1.0.3.jar ${runtimeLib}/core-renderer.jar ${runtimeLib}/svgSalamander.jar ${runtimeLib}/jinput.jar lib/hazelcast-3.2.jar" />
				<attribute name="SplashScreen-Image" value="resources/icon/splashscreen.png" />
				<attribute name="Permissions" value="all-permissions" />

				<section name="org/freenono/">
					<attribute name="Specification-Title" value="${app.name}" />
					<attribute name="Specification-Version" value="${app.version}" />
					<attribute name="Specification-Vendor" value="${app.vendor}" />
					<attribute name="Implementation-Title" value="${app.name}" />
					<attribute name="Implementation-Version" value="${app.version} (svn rev ${info.entry.revision})" />
					<attribute name="Implementation-Vendor" value="${app.vendor}" />
				</section>
			</manifest>
		</jar>

		<!-- Include readme file in dist folder-->
		<copy file="README" todir="${dist}" />
		<copy file="LICENSE" todir="${dist}" />
		<copy file="CHANGELOG" todir="${dist}" />

		<!-- Replace placeholder in readme file-->
		<replace file="${dist}/README">
			<replacefilter token="@version@" value="${app.version}" />
			<replacefilter token="@date@" value="${TODAY}" />
		</replace>

	</target>


	<target name="getDocumentation" description="build and get documentation">

		<!-- Add documentation -->
		<ant dir="${docs}" target="manual_pdf" />
		<copy todir="${dist}/${docsDest}" flatten="true">
			<fileset dir="${docs}/documentation/manual" includes="**/manual_*.pdf" />
		</copy>
		<ant dir="${docs}" target="clean" />

	</target>


	<target name="runUnitTests" description="runs unit tests with JUnit4">

		<!--
		<ant inheritAll="false" useNativeBasedir="true" dir="${unitTests}" target="test" />
		<ant inheritAll="false" useNativeBasedir="true" dir="${unitTests}" target="clean" />
		-->

	</target>


	<target name="prepareLauncher" depends="init" 
		description="prepare launcher for linux and windows to include in dist">

		<!-- Create start script -->
		<condition property="startScript" value="runFreeNono.bat">
			<os family="windows" />
		</condition>
		<condition property="scriptSource" value="@echo off${line.separator}echo FreeNono is not tested under Microsoft Windows yet!">
			<os family="windows" />
		</condition>

		<condition property="startScript" value="runFreeNono.sh">
			<os family="unix" />
		</condition>
		<condition property="scriptSource" value="#!/usr/bin/env sh${line.separator}java -jar ./${name}-${app.version}-${DSTAMP}.jar -cp *">
			<os family="unix" />
		</condition>

		<echo file="${dist}/${startScript}" message="${scriptSource}" append="false" />
		<chmod file="${dist}/${startScript}" perm="a+x" />

		<taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask"/>
		<launch4j configFile="./launch4j.xml" jarPath="${name}-${app.version}-${DSTAMP}.jar" />

	</target>


	<target name="setRuntimeLibDeb">

		<property name="runtimeLib" value="/usr/share/java" />

	</target>


	<target name="deb" depends="runUnitTests, setRuntimeLibDeb, dist, getDocumentation" 
		description="build the deb file">

		<taskdef resource="ant_deb_task.properties" classpath="ant-deb-0.0.1.jar" />

		<!-- copy and rename icon -->
		<copy file="${resources}/icon/icon_freenono_big.png" tofile="${dist}/freenono.png" />

		<!-- create linux start script with correct paths for debian -->
		<echo file="${dist}/${package.name}" append="false">#!/usr/bin/env sh

FREENONO_HOME=/usr/share/freenono
LIB_PATH=/usr/share/java
java -jar $FREENONO_HOME/${name}-${app.version}-${DSTAMP}.jar -cp $LIB_PATH  
		</echo>

		<!-- create desktop file for application -->
		<desktopentry toFile="${dist}/FreeNono.desktop" name="FreeNono" 
			comment="An open-source implementation of the Nonogram game" 
			exec="/usr/games/freenono" icon="/usr/share/${package.name}/freenono.png" 
			categories="Game;LogicGame;Java" />
		
		<!-- create changelog and man page DEBIAN style ;-) -->
		<!--<gzip src="${docs}/man/freenono.6" destfile="${dist}/freenono.6.gz"/>
		<gzip src="${dist}/CHANGELOG" destfile="${dist}/changelog.gz"/>-->
		<copy file="${docs}/man/freenono.6" tofile="${dist}/freenono.6" />
		<exec executable="gzip">
			<arg value="-9"/>
			<arg value="${dist}/freenono.6"/>
		</exec>
		<move file="${dist}/CHANGELOG" tofile="${dist}/changelog" />
		<exec executable="gzip">
			<arg value="-9"/>
			<arg value="${dist}/changelog"/>
		</exec>
		
		<deb todir="dist" package="${package.name}" section="games" 
			depends="sun-java6-jre | openjdk-6-jre | default-jre, libvorbisspi-java, librestlet-java, libsvgsalamander-java, libtritonus-java, libcore-renderer-java, liblog4j1.2-java, libjinput-java">
			<version upstream="${app.version}" />
			<maintainer name="Christian Wichmann" email="info@freenono.org" />
			<description synopsis="Open-source implementation of the Nonogram game">
A logic puzzle in which cells in a grid have to be colored or left 
blank according to numbers given at the side of the grid to reveal 
a hidden picture.

More information under: http://www.freenono.org/
			</description>

			<!-- tar all necessary files with correct paths -->
			<tarfileset dir="${dist}" prefix="usr/share/${package.name}">
				<include name="nonograms/**" />
				<include name="lib/hazelcast-3.2.jar" />
				<include name="${name}-${app.version}-${DSTAMP}.jar" />
				<include name="freenono.png" />
			</tarfileset>
			<tarfileset file="${dist}/${package.name}" prefix="usr/games" filemode="755" />
			<tarfileset dir="${dist}" prefix="usr/share/doc/${package.name}">
				<include name="LICENSE" />
				<include name="README" />
				<include name="changelog.gz" />
				<include name="docs/**" />
			</tarfileset>
			<tarfileset file="${dist}/FreeNono.desktop" prefix="usr/share/applications" />
			<tarfileset file="${dist}/freenono.6.gz" prefix="usr/share/man/man6" />
		</deb>

		<move todir="." overwrite="true">
			<fileset dir="${dist}" includes="*.deb" />
		</move>

	</target>



	<target name="debWithLibs" depends="runUnitTests, dist, getDocumentation" 
		description="build the deb file with all libraries included">

		<taskdef resource="ant_deb_task.properties" classpath="ant-deb-0.0.1.jar" />

		<!-- copy and rename icon -->
		<copy file="${resources}/icon/icon_freenono_big.png" tofile="${dist}/freenono.png" />

		<!-- create linux start script with correct paths for debian -->
		<echo file="${dist}/${package.name}" append="false">#!/usr/bin/env sh

FREENONO_HOME=/usr/share/freenono
LIB_PATH=/usr/share/java
java -jar $FREENONO_HOME/${name}-${app.version}-${DSTAMP}.jar -cp $LIB_PATH  
		</echo>

		<!-- create desktop file for application -->
		<desktopentry toFile="${dist}/FreeNono.desktop" name="FreeNono" 
			comment="An open-source implementation of the Nonogram game" 
			exec="/usr/games/freenono" icon="/usr/share/${package.name}/freenono.png" 
			categories="Game;LogicGame;Java" />
		
		<!-- create changelog and man page DEBIAN style ;-) -->
		<!--<gzip src="${docs}/man/freenono.6" destfile="${dist}/freenono.6.gz"/>
		<gzip src="${dist}/CHANGELOG" destfile="${dist}/changelog.gz"/>-->
		<copy file="${docs}/man/freenono.6" tofile="${dist}/freenono.6" />
		<exec executable="gzip">
			<arg value="-9"/>
			<arg value="${dist}/freenono.6"/>
		</exec>
		<move file="${dist}/CHANGELOG" tofile="${dist}/changelog" />
		<exec executable="gzip">
			<arg value="-9"/>
			<arg value="${dist}/changelog"/>
		</exec>
		
		<!-- rename libs because they are named differently when installed as package dependencies -->
		<move file="${dist}/lib/org.restlet.jar" tofile="${dist}/lib/restlet.jar" />
		<move file="${dist}/lib/jinput-20100502.jar" tofile="${dist}/lib/jinput.jar" />

		<deb todir="dist" package="${package.name}" section="games" 
			depends="sun-java6-jre | openjdk-6-jre | default-jre">
			<version upstream="${app.version}" />
			<maintainer name="Christian Wichmann" email="info@freenono.org" />
			<description synopsis="Open-source implementation of the Nonogram game">
			A logic puzzle in which cells in a grid have to be colored or left 
			blank according to numbers given at the side of the grid to reveal 
			a hidden picture.

			More information under: http://www.freenono.org/
			</description>

			<!-- tar all necessary files with correct paths -->
			<tarfileset dir="${dist}" prefix="usr/share/${package.name}">
				<include name="nonograms/**" />
				<include name="lib/**" />
				<!-- <exclude name="lib/sqlite-jdbc-3.7.2.jar" />-->
				<!-- exclude jinput because jni is plattform-dependent -->
				<exclude name="lib/jinput.jar" />
				<exclude name="lib/hazelcast-client-3.2.jar" />
				<include name="${name}-${app.version}-${DSTAMP}.jar" />
				<include name="freenono.png" />
			</tarfileset>
			<tarfileset file="${dist}/${package.name}" prefix="usr/games" filemode="755" />
			<tarfileset dir="${dist}" prefix="usr/share/doc/${package.name}">
				<include name="LICENSE" />
				<include name="README" />
				<include name="changelog.gz" />
				<include name="docs/**" />
			</tarfileset>
			<tarfileset file="${dist}/FreeNono.desktop" prefix="usr/share/applications" />
			<tarfileset file="${dist}/freenono.6.gz" prefix="usr/share/man/man6" />
		</deb>

		<move todir="." overwrite="true">
			<fileset dir="${dist}" includes="*.deb" />
		</move>

	</target>



	<target name="distZip" depends="dist, prepareLauncher, getDocumentation" 
		description="zipping build with launcher scripts for distribution">

		<!-- rename dist directory -->
		<move file="${dist}" tofile="${app.name}-${app.version}" />

		<!-- zip dist directory and delete it -->
		<zip destfile="${app.name}-${app.version}.zip">
			<zipfileset prefix="${app.name}" dir="${app.name}-${app.version}" 
				includes="**/*" excludes="${startScript}" />
			<zipfileset prefix="${app.name}" dir="${app.name}-${app.version}" 
				includes="${startScript}" filemode="755" />
		</zip>

		<delete dir="${app.name}-${app.version}" />

	</target>

	
	
	<target name="installer" depends="dist, prepareLauncher, getDocumentation" 
			description="create windows installe">

		<taskdef name="nsis" classname="com.danielreese.nsisant.Task" classpath="nsisant-1.3.jar" />
		    	
		<nsis script="installer.nsi">
			<define name="PRODUCT" value="${app.name}"/>
			<define name="PRODUCT_VERSION" value="${app.version}"/>
		</nsis>

	</target>
	


	<target name="signJars" depends="" 
		description="signs jar files and copies them to signed folder for distribution">

		<signjar destDir="${signed}" alias="FreeNonoWebstart" keystore="FreeNonoKeystore" 
			storepass="ksjdhfg665" lazy="true" preservelastmodified="true">

			<path>
				<fileset dir="${dist}" includes="**/*.jar" />
			</path>

			<flattenmapper />
		</signjar>

		<copy file="${dist}/${lib}/svgSalamander.jar" todir="${signed}" />

	</target>



	<target name="resolve" description="retrieve dependencies with ivy">
		
		<taskdef name="ivy" classname="org.apache.ivy.ant.IvyTask" classpath="/usr/share/java/ivy.jar" />
		<ivy:retrieve pattern="[organisation]/[artifact]-[revision].[ext]" />
		
	</target>



	<target name="tarball_debian" depends="init, packNonograms, get_svn_revision, getDocumentation"
		description="create tarball for building FreeNono as Debian package">

		<!-- remove characters from version information for debian package building -->
		<loadresource property="debian_version">
		  <propertyresource name="app.version"/>
		  <filterchain>
		    <tokenfilter>
		  	  <deletecharacters chars="abrc"/>
      	      <trim/>
	    	  <ignoreblank/>
		    </tokenfilter>
		  </filterchain>
		</loadresource>

		<!-- Replace placeholder in README file and correct some file names -->
		<copy file="CHANGELOG" tofile="${dist}/changelog" />
		<copy file="${resources}/icon/icon_freenono_big.png" tofile="${dist}/freenono.png" />
		<copy file="README" todir="${dist}" />
		<replace file="${dist}/README">
			<replacefilter token="@version@" value="${app.version}" />
			<replacefilter token="@date@" value="${TODAY}" />
		</replace>
		<copy file="debian/changes/build.xml" todir="${dist}" />
		<replace file="${dist}/build.xml">
			<replacefilter token="@svn_revision@" value="${info.entry.revision}" />
		</replace>
		
		<!-- include all necessary files into tarball -->
		<property name="tar_dir" value="${package.name}-${debian_version}" />
		<tar destfile="${package.name}_${debian_version}.orig.tar.gz" compression="gzip">
			<tarfileset dir="${dist}" prefix="${tar_dir}">
				<include name="README" />
				<include name="changelog" />
				<include name="freenono.png" />
				<include name="build.xml" />
			</tarfileset>
			<tarfileset dir="." prefix="${tar_dir}">
				<include name="AUTHORS" />
				<include name="LICENSE" />
			</tarfileset>
			<tarfileset dir="${src}" prefix="${tar_dir}/src">
				<include name="**" />
			</tarfileset>
			<tarfileset dir="${lib_data}" prefix="${tar_dir}/src">
				<include name="**" />
				<exclude name="log4j.xml" />
			</tarfileset>
			<tarfileset dir="${lib_ui}" prefix="${tar_dir}/src">
				<include name="**" />
			</tarfileset>
			<tarfileset dir="${lib}" prefix="${tar_dir}/lib">
				<!-- include Hazelcast because no debian package is available -->
				<include name="hazelcast-3.2.jar" />
			</tarfileset>
			<tarfileset dir="${docs}" prefix="${tar_dir}/docs">
				<include name="**" />
				<exclude name="screenshots/**" />
			</tarfileset>
			<tarfileset dir="${dist}/${docsDest}" prefix="${tar_dir}/docs/manual">
				<include name="*.pdf" />
			</tarfileset>
			<tarfileset dir="debian" prefix="${tar_dir}/debian">
				<include name="**" />
				<exclude name="changes" />
			</tarfileset>
			<tarfileset dir="${dist}" prefix="${tar_dir}">
				<include name="nonograms/**" />
			</tarfileset>
		</tar>

	</target>



	<target name="rpm" depends="init, dist" description="builds FreeNono and package it as rpm">

		<property name="rpm_build" location="rpm_build" />

		<mkdir dir="${rpm_build}" />
		<mkdir dir="${rpm_build}/BUILD" />
		<mkdir dir="${rpm_build}/RPMS" />
		<mkdir dir="${rpm_build}/SOURCES" />
		<mkdir dir="${rpm_build}/SPECS" />
		<mkdir dir="${rpm_build}/SRPMS" />

	</target>



	<target name="clean" description="clean up">

		<!-- Delete the build and dist directories -->
		<delete dir="${build}" />
		<delete dir="${dist}" />
		<delete dir="${signed}" />

	</target>

</project>
