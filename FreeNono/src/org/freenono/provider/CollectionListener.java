/*****************************************************************************
 * FreeNono - A free implementation of the nonogram game
 * Copyright (c) 2013 by FreeNono Development Team
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *****************************************************************************/
package org.freenono.provider;

import java.util.EventListener;
import java.util.EventObject;

/**
 * The listener interface for receiving collection events. The class that is interested in
 * processing an collection event implements this interface, and the object created with that class
 * is registered with <code>CollectionProvider</code>, using the provider's
 * <code>startLoading</code> method. When the collection is loaded, that object's
 * <code>collectionLoading</code> method is invoked.
 *
 * @author Christian Wichmann
 */
public interface CollectionListener extends EventListener {

    /**
     * A semantic event which indicates that a collection-based action occurred. This high-level
     * event is generated by a <code>CollectionProvider</code> when the collection is loaded. The
     * event is passed to the <code>CollectionListener</code> object that registered to receive such
     * events using the component's <code>startLoading</code> method.
     * <p>
     * The object that implements the <code>CollectionListener</code> interface gets this
     * <code>CollectionEvent</code> when the event occurs.
     *
     * @author Christian Wichmann
     */
    public class CollectionEvent extends EventObject {

        private static final long serialVersionUID = -7490618052412941904L;

        private int coursesAlreadyLoaded = 0;
        private int coursesInCollection = 0;
        private final boolean collectionChanged = false;

        /**
         * Initializes a new <code>CollectionEvent</code>.
         *
         * @param source
         *            source of this event
         * @param coursesLoadedComplete
         *            number of courses that have been completely loaded
         * @param coursesInCollection
         *            number of courses in this collection
         * @param courseChanged
         *            whether collection has changed
         */
        public CollectionEvent(final Object source, final int coursesLoadedComplete, final int coursesInCollection,
                final boolean courseChanged) {

            super(source);

            this.coursesAlreadyLoaded = coursesLoadedComplete;
            this.coursesInCollection = coursesInCollection;
        }

        /**
         * Returns number of courses that have been completely loaded by time of the event.
         *
         * @return number of courses that have been completely loaded
         */
        public final int getCoursesAlreadyLoaded() {

            return coursesAlreadyLoaded;
        }

        /**
         * Returns number of courses in this collection.
         *
         * @return number of courses in this collection
         */
        public final int getCoursesInCollection() {

            return coursesInCollection;
        }

        /**
         * Returns whether this collection has changed, e.g. courses been added, removed or changed.
         *
         * @return true, if collection has changed
         */
        public final boolean hasCollectionChanged() {

            return collectionChanged;
        }
    }

    /**
     * Invoked when a collection is loaded. Every time a course of the nonogram collection is loaded
     * this method is called on all listener.
     *
     * @param e
     *            collection event
     */
    void collectionLoading(final CollectionEvent e);

    /**
     * Invoked when a collection is changed. This can mean that either a course of this nonogram
     * collection was removed, added or changed. Every time this happens this method is called on
     * all listeners.
     *
     * @param e
     *            collection event
     */
    void collectionChanged(final CollectionEvent e);

}
