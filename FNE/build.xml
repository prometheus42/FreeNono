<?xml version="1.0"?>
<project name="FNE - FreeNonoEditor" basedir="." default="build">

	<property name="src" location="src" />
	<property name="resources" location="src/resources" />
	<property name="build" location="build" />
	<property name="dist" location="dist" />
	<property name="libDirectory" value="../FreeNono/lib" />
	<property name="lib_ui" location="../lib_ui/src" />
	<property name="lib_data" location="../lib_data/src" />
	<property name="lib_data.src" location="../lib_data/src" />

	<property name="lib" value="lib" />
	<property name="startScript" value="FNE.sh" />
	<property name="package.name" value="fne" />

	<property name="name" value="FNE" />
	<property name='app.version' value='0.2-alpha' />
	<property name='app.name' value='FreeNonoEditor' />
	<property name='app.vendor' value='FreeNono Development Team' />

	<description>
		FreeNonoEditor
		
		Dependencies:
		- launch4j
		- ...
	</description>

	<echo>
	    Application: ${app.name} ${app.version}
	    Build File : ${ant.file} 
	    Run by     : ${user.name}
	    Build Dir  : ${build}
	</echo>


	<target name="init">

		<!-- Create the time stamp -->
		<tstamp />

		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}" />
		<mkdir dir="${dist}" />

	</target>


	<target name="build" depends="init" description="compile the source ">

		<!-- Compile the java code from ${src} into ${build} -->
		<javac destdir="${build}" debug="false" deprecation="true" optimize="true" includeantruntime="false" target="1.6" source="1.6">
			<src>
				<pathelement location="${src}" />
				<pathelement location="${lib_ui}" />
				<pathelement location="${lib_data}" />
			</src>
			<!-- Set classpath -->
			<classpath>
				<pathelement path="${libDirectory}/core-renderer.jar" />
				<pathelement path="${libDirectory}/log4j-1.2.jar" />
				<pathelement path="${libDirectory}/org.restlet.jar" />
			</classpath>
		</javac>

	</target>


	<target name="dist" depends="build" description="generate the distribution">

		<!-- Set lib path for jar manifest if it was not set priviously (setRuntimeLibDeb) -->
		<property name="runtimeLib" value="lib" />

		<!-- Find HEAD revision number from svn repo -->
		<exec executable="svn" outputproperty="svninfo.xml">
			<arg line="info svn://svn.code.sf.net/p/freenono/svn/trunk/FreeNono -r HEAD --xml" />
		</exec>
		<xmlproperty collapseAttributes="true">
			<propertyresource name="svninfo.xml" />
		</xmlproperty>
		<!-- result in property ${info.entry.revision} -->

		<!-- Include all libraries in dist folder-->
		<copy todir="${dist}/${lib}">
			<fileset dir="${libDirectory}" includes="log4j-1.2.jar" />
			<fileset dir="${libDirectory}" includes="org.restlet.jar" />
		</copy>

		<!-- create linux start script -->
		<echo file="${dist}/${startScript}" append="false">#!/usr/bin/env sh

java -jar ./${name}-${app.version}-${DSTAMP}.jar -cp *
		</echo>
		<exec dir="${dist}" executable="chmod">
			<arg value="a+x" />
			<arg value="./${startScript}" />
		</exec>

		<!-- Include readme file in dist folder-->
		<copy file="README" todir="${dist}" />

		<!-- Replace placeholder in readme file-->
		<replace file="${dist}/README">
			<replacefilter token="@version@" value="${app.version}" />
			<replacefilter token="@date@" value="${TODAY}" />
		</replace>

		<!-- Put everything into JAR file -->
		<jar jarfile="${dist}/${name}-${app.version}-${DSTAMP}.jar" basedir="${build}">

			<!-- Include binary files from all necessary FreeNono projects -->
			<fileset dir="${lib_ui}" includes="**/*.class" />
			<fileset dir="${lib_data}" includes="**/*.class" />

			<!-- Include source files -->
			<fileset dir="${src}" includes="**/*.java" />
			<fileset dir="${lib_ui}" includes="**/*.java" />
			<fileset dir="${lib_data}" includes="**/*.java" />

			<!-- Include resource files -->
			<fileset dir="${src}" includes="resources/**/*" />
			<fileset dir="${lib_data.src}" includes="resources/xsd/nonogram.xsd" />
			<fileset dir="${lib_data.src}" includes="log4j.xml" />

			<manifest>
				<attribute name="Main-Class" value="org.freenono.editor.RunEditor" />
				<attribute name="Class-Path" value="${runtimeLib}/log4j-1.2.jar ${runtimeLib}/restlet.jar" />
				<attribute name="SplashScreen-Image" value="resources/icon/splashscreen_fne.png" />

				<section name="org/freenono/editor/">
					<attribute name="Specification-Title" value="${app.name}" />
					<attribute name="Specification-Version" value="${app.version}" />
					<attribute name="Specification-Vendor" value="${app.vendor}" />
					<attribute name="Implementation-Title" value="${app.name}" />
					<attribute name="Implementation-Version" value="${app.version} (svn rev ${info.entry.revision})" />
					<attribute name="Implementation-Vendor" value="${app.vendor}" />
				</section>
			</manifest>
		</jar>

	</target>


	<target name="prepareLauncher" depends="init" description="prepare launcher for linux and windows to include in dist">

		<property name="launch4j.dir" location="/opt/launch4j" />

		<taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask" classpath="${launch4j.dir}/launch4j.jar
			        :${launch4j.dir}/lib/xstream.jar" />

		<launch4j configFile="./launch4j.xml" jarPath="${name}-${app.version}-${DSTAMP}.jar">
			<!--config headerType="gui" outfile="${dist}/FNE.exe" 
					icon="${resources}/icon/icon_fne.png"
					dontWrapJar="true" jarPath="${name}-${app.version}-${DSTAMP}.jar">
					<jre minVersion="1.6.0" />
				</config-->
		</launch4j>

	</target>


	<target name="distZip" depends="dist, prepareLauncher" description="zipping build with launcher scripts for distribution">

		<!-- rename dist directory -->
		<move file="${dist}" tofile="${app.name}-${app.version}" />

		<!-- zip dist directory and delete it -->
		<zip destfile="${app.name}-${app.version}.zip">
			<zipfileset prefix="${app.name}" dir="${app.name}-${app.version}" includes="**/*" excludes="${startScript}" />
			<zipfileset prefix="${app.name}" dir="${app.name}-${app.version}" includes="${startScript}" filemode="755" />
		</zip>

		<delete dir="${app.name}-${app.version}" />

	</target>



	<target name="setRuntimeLibDeb">

		<property name="runtimeLib" value="/usr/share/java" />

	</target>


	<target name="deb" depends="setRuntimeLibDeb, dist" description="build the deb file">

		<taskdef resource="ant_deb_task.properties" classpath="/opt/ant-tasks/ant-deb-0.0.1.jar" />

		<!-- copy and rename icon -->
		<copy file="${resources}/icon/icon_fne.png" tofile="${dist}/fne.png" />

		<!-- create linux start script with correct paths for debian -->
		<echo file="${dist}/${package.name}" append="false">#!/usr/bin/env sh

FNE_HOME=/usr/share/fne
LIB_PATH=/usr/share/java
java -jar $FNE_HOME/${name}-${app.version}-${DSTAMP}.jar -cp $LIB_PATH  
		</echo>

		<!-- create desktop file for application -->
		<desktopentry toFile="${dist}/FNE.desktop" name="FreeNonoEditor" comment="An editor for nonogram riddles" exec="/usr/bin/fne" icon="/usr/share/${package.name}/fne.png" categories="Game;LogicGame;Java" />

		<deb todir="dist" package="${package.name}" section="games" depends="sun-java6-jre | openjdk-6-jre | default-jre, librestlet-java, libcore-renderer-java, liblog4j1.2-java">
			<version upstream="${app.version}" />
			<maintainer name="Christian Wichmann" email="info@freenono.org" />
			<description synopsis="">
	FNE is an open-source editor for nonogram riddles for FreeNono.

	More information under: http://www.freenono.org/
				
			</description>

			<!-- tar all necessary files with correct paths -->
			<tarfileset dir="${dist}" prefix="usr/share/${package.name}">
				<include name="${name}-${app.version}-${DSTAMP}.jar" />
				<include name="fne.png" />
			</tarfileset>
			<tarfileset file="${dist}/${package.name}" prefix="usr/bin" filemode="755" />
			<tarfileset dir="${dist}" prefix="usr/share/doc/${package.name}">
				<include name="LICENSE" />
				<include name="README" />
			</tarfileset>
			<tarfileset file="${dist}/FNE.desktop" prefix="usr/share/applications" />
		</deb>

		<move todir="." overwrite="true">
			<fileset dir="${dist}" includes="*.deb" />
		</move>

	</target>


	<target name="clean" description="clean up">

		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${build}" />
		<delete dir="${dist}" />

	</target>

</project>
